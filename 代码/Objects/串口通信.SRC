; .\Objects\¥Æø⁄Õ®–≈.SRC generated from: ¥Æø⁄Õ®–≈.c
; COMPILER INVOKED BY:
;        C:\Program Files (x86)\Keil\C51\BIN\C51.EXE ¥Æø⁄Õ®–≈.c OPTIMIZE(8,SPEED) BROWSE INCDIR(C:\Program Files (x86)\Keil\C51\INC;C:\Program Files (x86)\Keil\C51\INC) DEBUG OBJECTEXTEND PRINT(.\Listings\¥Æø⁄Õ®–≈.lst) SRC(.\Objects\¥Æø⁄Õ®–≈.SRC)

$NOMOD51

NAME	________

P0	DATA	080H
P1	DATA	090H
P2	DATA	0A0H
P3	DATA	0B0H
T0	BIT	0B0H.4
AC	BIT	0D0H.6
T1	BIT	0B0H.5
T2	BIT	090H.0
EA	BIT	0A8H.7
IE	DATA	0A8H
EXF2	BIT	0C8H.6
RD	BIT	0B0H.7
DS?	BIT	0A0H.5
ES	BIT	0A8H.4
IP	DATA	0B8H
RI	BIT	098H.0
INT0	BIT	0B0H.2
CY	BIT	0D0H.7
TI	BIT	098H.1
INT1	BIT	0B0H.3
wx1	BIT	080H.4
wx2	BIT	080H.5
RCAP2H	DATA	0CBH
wx3	BIT	080H.6
PS	BIT	0B8H.4
SP	DATA	081H
wx4	BIT	080H.7
T2EX	BIT	090H.1
OV	BIT	0D0H.2
RCAP2L	DATA	0CAH
C_T2	BIT	0C8H.1
WR	BIT	0B0H.6
RCLK	BIT	0C8H.5
SHCP	BIT	0A0H.7
TCLK	BIT	0C8H.4
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
TMOD	DATA	089H
TCON	DATA	088H
STCP	BIT	0A0H.6
IE0	BIT	088H.1
IE1	BIT	088H.3
B	DATA	0F0H
CP_RL2	BIT	0C8H.0
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
ET2	BIT	0A8H.5
TF1	BIT	088H.7
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
TB8	BIT	098H.3
EX1	BIT	0A8H.2
IT1	BIT	088H.2
TH2	DATA	0CDH
P	BIT	0D0H.0
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
SM2	BIT	098H.5
TL2	DATA	0CCH
PT0	BIT	0B8H.1
PT1	BIT	0B8H.3
RS0	BIT	0D0H.3
PT2	BIT	0B8H.5
TR0	BIT	088H.4
RS1	BIT	0D0H.4
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
DPH	DATA	083H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
REN	BIT	098H.4
T2CON	DATA	0C8H
RXD	BIT	0B0H.0
TXD	BIT	0B0H.1
F0	BIT	0D0H.5
PSW	DATA	0D0H
?PR?init_com?________                    SEGMENT CODE 
?PR?_send_data?________                  SEGMENT CODE 
?DT?_send_data?________                  SEGMENT DATA OVERLAYABLE 
?PR?_delay_ms?________                   SEGMENT CODE 
?PR?_ser_inout?________                  SEGMENT CODE 
?PR?_display?________                    SEGMENT CODE 
?PR?receive_and_display?________         SEGMENT CODE 
?DT?receive_and_display?________         SEGMENT DATA OVERLAYABLE 
?PR?main?________    SEGMENT CODE 
?CO?________         SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?DT?________         SEGMENT DATA 
	EXTRN	CODE (?C?CLDOPTR)
	EXTRN	CODE (?C?CLDPTR)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	table
	PUBLIC	main
	PUBLIC	receive_and_display
	PUBLIC	_display
	PUBLIC	_ser_inout
	PUBLIC	_delay_ms
	PUBLIC	_send_data
	PUBLIC	init_com

	RSEG  ?DT?_send_data?________
?_send_data?BYTE:
        str?140:   DS   3

	RSEG  ?DT?receive_and_display?________
?receive_and_display?BYTE:
received_data?548:   DS   4

	RSEG  ?DT?________
          table:   DS   10

	RSEG  ?CO?________
?SC_0:
	DB  'H' ,'e' ,'l' ,'l' ,'o' ,' ' ,'W' ,'o' ,'r' ,'l' 
	DB  'd' ,'!' ,000H


	RSEG  ?C_INITSEG
	DB	00AH
	DB	table
	DB	03FH
	DB	006H
	DB	05BH
	DB	04FH
	DB	066H
	DB	06DH
	DB	07DH
	DB	007H
	DB	07FH
	DB	06FH

; #include <reg52.h>
; #define uchar unsigned char
; void init_com(){

	RSEG  ?PR?init_com?________
init_com:
			; SOURCE LINE # 3
; 	SCON=0X50;			//ËÆæÁΩÆ‰∏≤Âè£ÁöÑÂ∑•‰ΩúÊñπÂºè‰∏∫1
			; SOURCE LINE # 4
	MOV  	SCON,#050H
; 	TMOD=0X20;			//ËÆæÁΩÆËÆ°Êï∞Âô®Â∑•‰ΩúÊñπÂºè‰∏∫2
			; SOURCE LINE # 5
	MOV  	TMOD,#020H
; 	TH1=0Xfd;		    //ËÆ°Êï∞Âô®ÂàùÂßãÂÄºËÆæÁΩÆÔºåÊ≥¢ÁâπÁéáÊòØ9600
			; SOURCE LINE # 6
	MOV  	TH1,#0FDH
; 	TL1=0Xfd;
			; SOURCE LINE # 7
	MOV  	TL1,#0FDH
; 	TR1=1;					    //ÊâìÂºÄËÆ°Êï∞Âô®
			; SOURCE LINE # 8
	SETB 	TR1
; }
			; SOURCE LINE # 9
	RET  	
; END OF init_com

; 
; 
; void send_data(uchar *str){

	RSEG  ?PR?_send_data?________
_send_data:
	USING	0
			; SOURCE LINE # 12
	MOV  	str?140,R3
	MOV  	str?140+01H,R2
	MOV  	str?140+02H,R1
; 	uchar i;
; 	for(i=0;str[i]!='\0';i++){
			; SOURCE LINE # 14
;---- Variable 'i?141' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
?C0002:
	MOV  	R3,str?140
	MOV  	R2,str?140+01H
	MOV  	R1,str?140+02H
	MOV  	DPL,R7
	MOV  	DPH,#00H
	LCALL	?C?CLDOPTR
	JZ   	?C0007
; 		SBUF = str[i];
			; SOURCE LINE # 15
	MOV  	SBUF,A
?C0005:
; 		while(!TI);
			; SOURCE LINE # 16
	JNB  	TI,?C0005
?C0006:
; 		TI = 0;
			; SOURCE LINE # 17
	CLR  	TI
; 	}
			; SOURCE LINE # 18
	INC  	R7
	SJMP 	?C0002
; }
			; SOURCE LINE # 19
?C0007:
	RET  	
; END OF _send_data

; 
; void delay_ms(uchar ms)        		         //Âª∂Êó∂Á®ãÂ∫è,Âª∂Êó∂Á∫¶msÊØ´Áßí

	RSEG  ?PR?_delay_ms?________
L?0030:
	USING	0
L?0031:
	LCALL	?C?CLDOPTR
L?0032:
	ADD  	A,#LOW (table+0FFD0H)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R7,A
	LCALL	_ser_inout
	MOV  	R7,#01H
_delay_ms:
	USING	0
			; SOURCE LINE # 21
;---- Variable 'i?243' assigned to Register 'R6' ----
;---- Variable 'ms?242' assigned to Register 'R7' ----
; {    
			; SOURCE LINE # 22
?C0008:
; 	uchar i,j;
; 	while(ms--)
			; SOURCE LINE # 24
	MOV  	R5,AR7
	DEC  	R7
	MOV  	A,R5
	JZ   	?C0016
; 		for(i = 0 ;i<5; i++)
			; SOURCE LINE # 25
	CLR  	A
	MOV  	R6,A
?C0010:
	MOV  	A,R6
	CLR  	C
	SUBB 	A,#05H
	JNC  	?C0008
; 			for(j=0;j<220;j++);
			; SOURCE LINE # 26
;---- Variable 'j?244' assigned to Register 'R5' ----
	CLR  	A
	MOV  	R5,A
?C0013:
	INC  	R5
	CJNE 	R5,#0DCH,?C0013
?C0012:
	INC  	R6
	SJMP 	?C0010
; }
			; SOURCE LINE # 27
?C0016:
	RET  	
; END OF _delay_ms

; 
; 
; 
; sbit DS = P2^5;                            //Â∞ÜÂçïÁâáÊú∫ÁöÑP2.5ÂºïËÑöÂÆö‰πâ‰∏∫74HC595ÁöÑ‰∏≤Ë°åÊï∞ÊçÆËæìÂÖ•Á´Ø
; sbit STCP = P2^6;                          //Â∞ÜÂçïÁâáÊú∫ÁöÑP2.6ÂºïËÑöÂÆö‰πâ‰∏∫74HC595ÁöÑÂ≠òÂÇ®ÂØÑÂ≠òÂô®Êó∂ÈíüËæìÂÖ•Á´Ø
; sbit SHCP = P2^7;                          //Â∞ÜÂçïÁâáÊú∫ÁöÑP2.7ÂºïËÑöÂÆö‰πâ‰∏∫74HC595ÁöÑÁßª‰ΩçÂØÑÂ≠òÂô®Êó∂ÈíüËæìÂÖ•Á´Ø
; 
; sbit wx1=P0^4;                                            //‰ΩçÈÄâ0Ôºå‰ΩéÁîµÂπ≥ÊúâÊïàÔºåÈÄâ‰∏≠Á¨¨‰∏Ä‰∏™Êï∞Á†ÅÁÆ°
; sbit wx2=P0^5;                                            //‰ΩçÈÄâ1Ôºå‰ΩéÁîµÂπ≥ÊúâÊïàÔºåÈÄâ‰∏≠Á¨¨‰∫å‰∏™Êï∞Á†ÅÁÆ°
; sbit wx3=P0^6;                                            //‰ΩçÈÄâ2Ôºå‰ΩéÁîµÂπ≥ÊúâÊïàÔºåÈÄâ‰∏≠Á¨¨‰∏â‰∏™Êï∞Á†ÅÁÆ°
; sbit wx4=P0^7;                                            //‰ΩçÈÄâ3Ôºå‰ΩéÁîµÂπ≥ÊúâÊïàÔºåÈÄâ‰∏≠Á¨¨Âõõ‰∏™Êï∞Á†ÅÁÆ°
; /*ÂÖ±Èò¥ÊûÅÊï∞Á†ÅÁÆ°ÊòæÁ§∫0~9Êó∂ÁöÑËæìÂÖ•Êï∞ÊçÆ*/
; uchar table[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
; /*Êï∞Á†ÅÁÆ°ÊòæÁ§∫ÂáΩÊï∞ÔºåÂà©Áî®74HC595ÂÆûÁé∞‰∏≤Ë°åËæìÂÖ•Âπ∂Ë°åËæìÂá∫*/
; void ser_inout(uchar datas){

	RSEG  ?PR?_ser_inout?________
_ser_inout:
	USING	0
			; SOURCE LINE # 42
;---- Variable 'datas?345' assigned to Register 'R7' ----
; 	uchar i;
; 	STCP = 0;	                              
			; SOURCE LINE # 44
	CLR  	STCP
; 	for(i=0 ; i < 8 ; i++)                   //‰ªéÈ´ò‰ΩçÂà∞‰Ωé‰ΩçÔºå‰æùÊ¨°‰º†ÈÄÅÊï∞ÊçÆ
			; SOURCE LINE # 45
;---- Variable 'i?346' assigned to Register 'R6' ----
	CLR  	A
	MOV  	R6,A
?C0017:
; 	{
			; SOURCE LINE # 46
; 		SHCP = 0;                              
			; SOURCE LINE # 47
	CLR  	SHCP
; 		DS=datas & 0x80;		
			; SOURCE LINE # 48
	MOV  	A,R7
	RLC  	A
	MOV  	DS?,C
; 		datas<<=1;                            
			; SOURCE LINE # 49
	MOV  	A,R7
	ADD  	A,ACC
	MOV  	R7,A
; 		SHCP = 1;                              //P2.7ÂºïËÑöÁΩÆ1Ôºå‰∫ßÁîü‰∏äÂçáÊ≤øÔºåÂ∞ÜP2.5ÂºïËÑö‰∏äÁöÑÊï∞ÊçÆ‰º†ÂÖ•74HC595
			; SOURCE LINE # 50
	SETB 	SHCP
; 	}
			; SOURCE LINE # 51
	INC  	R6
	CJNE 	R6,#08H,?C0017
?C0018:
; 	STCP = 1;                                //P2.6ÁΩÆ1Ôºå‰∫ßÁîü‰∏äÂçáÊ≤ø
			; SOURCE LINE # 52
	SETB 	STCP
; }
			; SOURCE LINE # 53
	RET  	
; END OF _ser_inout

; 
; 
; void display(uchar *data_arr){

	RSEG  ?PR?_display?________
_display:
	USING	0
			; SOURCE LINE # 56
;---- Variable 'data_arr?447' assigned to Register 'R1/R2/R3' ----
?C0021:
; 	while(1){//‰∏ÄÁõ¥Âà∑Êñ∞ÊòæÁ§∫
			; SOURCE LINE # 57
; 		wx1=0;
			; SOURCE LINE # 58
	CLR  	wx1
; 		ser_inout(table[data_arr[0]-'0']);
			; SOURCE LINE # 59
	LCALL	?C?CLDPTR
; 		delay_ms(1);
			; SOURCE LINE # 60
	LCALL	L?0032
; 		wx1=1;
			; SOURCE LINE # 61
	SETB 	wx1
; 		
; 		wx2=0;
			; SOURCE LINE # 63
	CLR  	wx2
; 		ser_inout(table[data_arr[1]-'0']);
			; SOURCE LINE # 64
	MOV  	DPTR,#01H
; 		delay_ms(1);
			; SOURCE LINE # 65
	LCALL	L?0030
; 		wx2=1;
			; SOURCE LINE # 66
	SETB 	wx2
; 		
; 		wx3=0;
			; SOURCE LINE # 68
	CLR  	wx3
; 		ser_inout(table[data_arr[2]-'0']);
			; SOURCE LINE # 69
	MOV  	DPTR,#02H
; 		delay_ms(1);
			; SOURCE LINE # 70
	LCALL	L?0030
; 		wx3=1;
			; SOURCE LINE # 71
	SETB 	wx3
; 		
; 		wx4=0;
			; SOURCE LINE # 73
	CLR  	wx4
; 		ser_inout(table[data_arr[3]-'0']);
			; SOURCE LINE # 74
	MOV  	DPTR,#03H
; 		delay_ms(1);
			; SOURCE LINE # 75
	LCALL	L?0031
; 		wx4=1;
			; SOURCE LINE # 76
	SETB 	wx4
; 	}
			; SOURCE LINE # 77
	SJMP 	?C0021
; END OF _display

; }
; 
; void receive_and_display(){

	RSEG  ?PR?receive_and_display?________
receive_and_display:
	USING	0
			; SOURCE LINE # 80
; 	uchar received_data[4],i=0;
			; SOURCE LINE # 81
;---- Variable 'i?549' assigned to Register 'R7' ----
	CLR  	A
	MOV  	R7,A
?C0024:
; 	while(1){
			; SOURCE LINE # 82
; 		//Êé•Êî∂Êï∞ÊçÆ
; 		if(RI==1){
			; SOURCE LINE # 84
	JNB  	RI,?C0026
; 			received_data[i]=SBUF;
			; SOURCE LINE # 85
	MOV  	A,#LOW (received_data?548)
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,SBUF
; 			RI=0;
			; SOURCE LINE # 86
	CLR  	RI
; 			i++;
			; SOURCE LINE # 87
	INC  	R7
; 		}
			; SOURCE LINE # 88
?C0026:
; 		//ÊòæÁ§∫Êï∞ÊçÆ
; 		if(i==4){
			; SOURCE LINE # 90
	CJNE 	R7,#04H,?C0024
; 			display(received_data);
			; SOURCE LINE # 91
	MOV  	R3,#00H
	MOV  	R2,#HIGH (received_data?548)
	MOV  	R1,#LOW (received_data?548)
	LCALL	_display
; 			i=0;
			; SOURCE LINE # 92
	CLR  	A
	MOV  	R7,A
; 		}
			; SOURCE LINE # 93
; 	}
			; SOURCE LINE # 94
	SJMP 	?C0024
; END OF receive_and_display

; }
; 
; int main(){

	RSEG  ?PR?main?________
main:
	USING	0
			; SOURCE LINE # 97
;     init_com();//ÂàùÂßãÂåñ‰∏≤Ë°åÂè£ËÆæÁΩÆ
			; SOURCE LINE # 98
	LCALL	init_com
; 	send_data("Hello World!");
			; SOURCE LINE # 99
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_0)
	MOV  	R1,#LOW (?SC_0)
	LCALL	_send_data
; 	receive_and_display();
			; SOURCE LINE # 100
	LCALL	receive_and_display
; 	return 0;
			; SOURCE LINE # 101
	CLR  	A
	MOV  	R6,A
	MOV  	R7,A
; }			; SOURCE LINE # 102
?C0029:
	RET  	
; END OF main

	END
